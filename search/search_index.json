{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simple Store","text":"<p>This project is stable and being incubated for long-term support.</p> <p>Simple yet performant asynchronous file storage for Android.</p> <p>SimpleStore aims to provide developers an extremely robust and performant solution for storing key-value data on disk asynchronously. It is built using only Android and Java primitives and avoids taking on external dependencies making it ideal for critical startup storage. It has no opinion on how data is serialized, only storing <code>string</code>-<code>byte[]</code> pairs of small to moderate size. The core library only exposes a thread-safe, executor-explicit async API ensuring clear thread selection and no UI jank.</p> <p>All values are stored on disk as plain files that are \u201cnamespaced\u201d in a matching on-disk folder structure. The library also supports configuring a namespace to store data on a cache or transient partition.</p>"},{"location":"#basic-usage","title":"Basic usage","text":"<p>To include in a gradle project, add to your dependencies:</p> <pre><code>dependencies {\n    implementation 'com.uber.simplestore:simplestore:0.0.9'\n    // If using protocol buffers, also add:\n    implementation 'com.uber.simplestore:simplestore-proto:0.0.9'\n}\n</code></pre> <p>Out of the box, SimpleStore uses <code>ListenableFuture</code> to store <code>byte[]</code>, <code>String</code>, primitives and protocol buffers on internal storage.  <pre><code>SimpleStore simpleStore = SimpleStoreFactory.create(this, \"&lt;some-uuid-or-name&gt;\");\nListenableFuture&lt;String&gt; put = simpleStore.putString(\"some_key\", \"Foo value\");\nFutures.addCallback(\n        put,\n        new FutureCallback&lt;String&gt;() {\n          @Override\n          public void onSuccess(@NonNull String s) {\n\n          }\n\n          @Override\n          public void onFailure(@NonNull Throwable t) {\n            Log.e(\"MyActivity\", \"Save failure\", t);\n          }\n        },\n        mainExecutor());\nsimpleStore.close();\n</code></pre></p> <p>Note that if you use RxJava, Rx comes with a <code>fromFuture</code> method that allows you to wrap <code>ListenableFuture</code>:</p> <pre><code>Single&lt;String&gt; value = Single.fromFuture(simpleStore.getString(\"some_key\"));\n</code></pre>"},{"location":"#fundamentally-async","title":"Fundamentally Async","text":"<p>IO operations are fundamentally async, and any storage solution should be async all the way through.</p> <p>The implementation is written using async work queues. This allows us to implement under-the-hood optimizations that do not block consumers such as prefetching and pruning old cached values.</p> <p><code>Futures.get</code> from Guava is available for consumers who wish to run synchronously.</p>"},{"location":"#interface","title":"Interface","text":"<p>Only one interface is exposed for general use. Implementations of the interface provide a factory method for instantiating any variations.</p> <p>Usage: <pre><code>SimpleStore store = SimpleStoreFactory.create(context, \u201cfeature/mystuff\u201d, NamespaceConfig.DEFAULT);\nListenableFuture&lt;String&gt; value = store.putString(\"some_key\", value);\n</code></pre></p> <p>The interface is designed to allow composition with higher level wrappers such as a protocol buffers, Rx, or ListenableFuture transforms. </p> <p>ListenableFuture was chosen over Rx for the implementation as:  * Future transformations require explicit assignment to an Executor, making it difficult to accidentally perform IO operations in the incorrect pool.  * Executors do not suffer from the round-robin scheduler design of Rx, making deadlock between IO work impossible. * AndroidX and most Google libraries already ship ListenableFuture and associated Guava classes with them, so most Android apps can take on ListenableFuture without increasing binary size. * Interop with Futures is built into Rx via <code>Observables.fromFuture</code>.</p> <p>The base interface and implementation purposely leave out a synchronous API as disk IO is fundamentally async. A safe-ish synchronous API can be obtained via <code>Futures#getChecked</code> if absolutely needed for compatibility reasons, but most users who think they need sync will probably find the Futures helpers adequate for their needs.</p>"},{"location":"#closing-a-namespace","title":"Closing a namespace","text":"<p>SimpleStore is closable per namespace, and may only have one open instance per namespace process-wide. When a namespace is closed, the in-memory cache is destroyed. The store will deliver failures to all pending callbacks when closed. This ensures that the consumer is always notified if data does not make it to disk and can handle the failure appropriately such as logging a non-fatal. Any reads or writes attempted on the store after closure will result in an exception.</p> <p>In the future, we can arbitrarily clear portions of the memory cache of an open namespace when desired such as when the OS informs of a trim level. Since the API is fully async, consumers will not be janked and will just see original load latencies.</p>"},{"location":"#threading","title":"Threading","text":"<p>All operations are guaranteed to be executed in-order within the same namespace. A singular cached thread pool backs all stores process wide, and can be replaced with a custom executor via a static configuration method. It is safe to enqueue any operation from any thread, including the main thread. All future callbacks are paired with an executor to be run on, this forces parsing or other processing actions to get out of the way of ordered disk I/O.</p> <p>This model makes deadlock across namespaces impossible, as even a blockingGet cannot be issued on the ordered IO executor. Adopting this model leaves us room to experiment later with using explicit thread priority for different namespaces.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright (C) 2020 Uber Technologies\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#version-009","title":"Version 0.0.9","text":"<ul> <li>Remove Context from SimpleStore constructor</li> <li>Update AtomicFile implementation</li> <li>Prepare for Kotlin support</li> <li>Update dependencies: appcompat, guavaAndroid, kotlin, protoLite</li> <li>Update tooling</li> </ul>"},{"location":"changelog/#version-008","title":"Version 0.0.8","text":"<ul> <li>Upgrade to latest protolite runtime.</li> <li>Build with and target Android 11.</li> </ul>"},{"location":"changelog/#version-007","title":"Version 0.0.7","text":"<ul> <li>Upgrade to protolite\u2019s new runtime.</li> </ul>"},{"location":"changelog/#version-006","title":"Version 0.0.6","text":"<ul> <li>Move to older protolite until Google resolves issues on older devices.</li> <li>New deleteAllNow() feature</li> </ul>"},{"location":"changelog/#version-005","title":"Version 0.0.5","text":"<ul> <li>Initial release</li> </ul>"},{"location":"code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mobile-open-source@uber.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/\u00bc</p>"},{"location":"contributing/","title":"Contributing to SimpleStore","text":"<p>Uber welcomes contributions of all kinds and sizes. This includes everything from from simple bug reports to large features.</p>"},{"location":"contributing/#workflow","title":"Workflow","text":"<p>We love GitHub issues!</p> <p>For small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice.</p> <p>For big features, please open an issue so that we can agree on the direction, and hopefully avoid investing a lot of time on a feature that might need reworking.</p> <p>Small pull requests for things like typos, bug fixes, etc are always welcome.</p>"},{"location":"contributing/#dos-and-donts","title":"DOs and DON\u2019Ts","text":"<ul> <li>DO follow our coding style </li> <li>DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken.</li> <li> <p>DO keep the discussions focused. When a new or related topic comes up it\u2019s often better to create new issue than to side track the discussion.</p> </li> <li> <p>DON\u2019T submit PRs that alter licensing related files or headers. If you believe there\u2019s a problem with them, file an issue and we\u2019ll be happy to discuss it.</p> </li> </ul>"},{"location":"contributing/#guiding-principles","title":"Guiding Principles","text":"<ul> <li>We allow anyone to participate in our projects. Tasks can be carried out by anyone that demonstrates the capability to complete them</li> <li>Always be respectful of one another. Assume the best in others and act with empathy at all times</li> <li>Collaborate closely with individuals maintaining the project or experienced users. Getting ideas out in the open and seeing a proposal before it\u2019s a pull request helps reduce redundancy and ensures we\u2019re all connected to the decision making process</li> </ul>"}]}